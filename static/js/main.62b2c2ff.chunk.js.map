{"version":3,"sources":["components/comment.js","actions.js","components/commentsList.js","components/post.js","components/postList.js","api/loadApi.js","App.js","index.js","reducer.js"],"names":["mapDispatchToProps","removeComment","id","type","connect","state","posts","_ref","title","body","email","react_default","a","createElement","className","onClick","href","CommentsList","comments","map","comment","components_comment","key","name","deleteSinglePost","userName","address","commentsList","loadingData","dispatch","_ref2","postsFromServer","usersFromServer","commentsFromServer","regenerator_default","async","_context","prev","next","awrap","Promise","all","fetch","then","response","json","catch","sent","Object","slicedToArray","post","objectSpread2","user","find","person","userId","filter","postId","stop","isLoaded","loading","components_post","concat","city","street","Fragment","App","postList","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","react_redux_es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.62b2c2ff.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteComment } from '../actions';\n\nconst SingleComment = ({ title, body, email, id, removeComment }) => (\n  <section className=\"comment\">\n    <h4 className=\"comment__header\">\n      <button\n        className=\"post__delete\"\n        type=\"button\"\n        onClick={() => removeComment(id)}\n      >\n        Delete\n      </button>\n      {title}\n    </h4>\n    <article>{body}</article>\n    <a\n      className=\"comment__email\"\n      href=\"/#\"\n    >\n      {email}\n    </a>\n\n  </section>\n);\n\nconst mapStateToProps = state => ({\n  posts: state.posts,\n});\n\nconst mapDispatchToProps = {\n  removeComment: deleteComment,\n};\n\nSingleComment.propTypes = {\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  removeComment: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SingleComment);\n","import { getPosts, getUsers, getComments } from './api/loadApi';\n\nexport const START_LOADING = 'START_LOADING';\nexport const HANDLE_SUCCESS = 'HANDLE_SUCCESS';\nexport const DELETE_POST = 'DELETE_POST';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\nexport const LOADING = 'LOADING';\n\nconst startLoading = () => ({ type: START_LOADING });\nconst loadingProcess = () => ({ type: LOADING });\nconst handleSuccess = posts => ({\n  type: HANDLE_SUCCESS, posts,\n});\n\nexport const loadPosts = () => async(dispatch) => {\n  dispatch(loadingProcess());\n\n  const [\n    postsFromServer,\n    usersFromServer,\n    commentsFromServer,\n  ] = await Promise.all([\n    getPosts(),\n    getUsers(),\n    getComments(),\n  ]);\n\n  dispatch(handleSuccess(postsFromServer.map(post => (\n    {\n      ...post,\n      user: usersFromServer.find(person => person.id === post.userId),\n      comments: commentsFromServer\n        .filter(comment => comment.postId === post.id),\n    }))));\n\n  dispatch(startLoading());\n};\n\nexport const deletePost = id => ({\n  type: DELETE_POST, id,\n});\n\nexport const deleteComment = id => ({\n  type: DELETE_COMMENT, id,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SingleComment from './comment';\n\nconst CommentsList = ({ comments }) => (\n  <article>\n    <h3>Comments:</h3>\n    {comments.map(comment => (\n      <SingleComment\n        key={comment.id}\n        id={comment.id}\n        title={comment.name}\n        body={comment.body}\n        email={comment.email}\n      />\n    ))}\n  </article>\n);\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    body: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    name: PropTypes.string,\n    postId: PropTypes.number,\n  })).isRequired,\n};\n\nexport default CommentsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CommentsList from './commentsList';\nimport { deletePost } from '../actions';\n\nconst Post = ({\n  id,\n  title,\n  body,\n  userName,\n  email,\n  address,\n  comments,\n  deleteSinglePost,\n}) => (\n  <article className=\"post\">\n    <h2 className=\"post__title\">\n      <button\n        type=\"button\"\n        className=\"post__delete\"\n        onClick={() => deleteSinglePost(id)}\n      >\n        Delete post\n      </button>\n      {title}\n    </h2>\n    <p className=\"post__body\">{body}</p>\n    <p className=\"post__user\">\n      Author:\n      {userName}\n    </p>\n    <address className=\"post__address\">{address}</address>\n    <a className=\"post__email\" href=\"/#\">{email}</a>\n    <div className=\"post__comments\">\n      <CommentsList comments={comments} />\n    </div>\n  </article>\n);\n\nconst mapStateToProps = state => ({\n  posts: state.posts,\n});\n\nconst mapDispatchToProps = {\n  deleteSinglePost: deletePost,\n};\n\nPost.propTypes = {\n  body: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  userName: PropTypes.string.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    body: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    name: PropTypes.string,\n    postId: PropTypes.number,\n  })).isRequired,\n  address: PropTypes.string.isRequired,\n  deleteSinglePost: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Post);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { loadPosts } from '../actions';\nimport Post from './post';\n\nconst PostList = ({ isLoaded, loading, loadingData, posts }) => {\n  const loadData = async() => {\n    await loadingData();\n  };\n\n  return (\n    <div>\n      { isLoaded\n        ? (\n          <section className=\"main\">\n            {posts.map(post => (\n              <Post\n                key={post.id}\n                id={post.id}\n                title={post.title}\n                body={post.body}\n                userName={post.user.name}\n                email={post.user.email}\n                address={`${post.user.address.city}, \n                ${post.user.address.street}`}\n                comments={post.comments}\n              />\n            ))}\n          </section>\n        ) : (\n          <div>\n            { loading ? (\n              <>\n                <div className=\"loadingio-spinner-double-ring-9q7pnd89ma7\">\n                  <div className=\"ldio-825x8t7zp7o\">\n                    <div />\n                    <div />\n                    <div>\n                      <div />\n                    </div>\n                    <div>\n                      <div />\n                    </div>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <button\n                className=\"ui positive basic button\"\n                type=\"button\"\n                onClick={loadData}\n              >\n                Click me\n              </button>\n            )}\n          </div>\n        )}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  posts: state.posts,\n  isLoaded: state.isLoaded,\n  loading: state.loading,\n});\n\nconst mapDispatchToProps = {\n  loadingData: loadPosts,\n};\n\nPostList.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n  loading: PropTypes.bool.isRequired,\n  loadingData: PropTypes.func.isRequired,\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    body: PropTypes.string.isRequired,\n    comments: PropTypes.arrayOf(PropTypes.object),\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    user: PropTypes.objectOf(PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.object,\n    ])),\n  })).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);\n","// eslint-disable-next-line max-len\nexport const getPosts = () => fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => response.json())\n  .catch(() => 'Something went wrong');\n\n// eslint-disable-next-line max-len\nexport const getUsers = () => fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .catch(() => 'Something went wrong');\n\n// eslint-disable-next-line max-len\nexport const getComments = () => fetch('https://jsonplaceholder.typicode.com/comments')\n  .then(response => response.json())\n  .catch(() => 'Something went wrong');\n","import React from 'react';\nimport './App.css';\nimport PostList from './components/postList';\n\nfunction App() {\n  return (\n    <section>\n      <PostList />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { reducer } from './reducer';\n\nconst store = createStore(reducer, {\n  isLoaded: false,\n  loading: false,\n  posts: [],\n}, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n","import { START_LOADING,\n  HANDLE_SUCCESS,\n  DELETE_POST,\n  DELETE_COMMENT,\n  LOADING } from './actions';\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        isLoaded: true,\n      };\n    case LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case HANDLE_SUCCESS:\n      return {\n        ...state,\n        posts: action.posts,\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post.id !== action.id),\n      };\n    case DELETE_COMMENT:\n      return {\n        ...state,\n        posts: state.posts.map(post => (\n          {\n            ...post,\n            comments: post.comments.filter(comment => comment.id !== action.id),\n          })),\n      };\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}